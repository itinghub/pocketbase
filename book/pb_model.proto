syntax = "proto3";
import "google/protobuf/struct.proto";

/*
 pocketbase 数据表
生成sql时要默认规则如下,除非表中专门指定，否则以这里为准：
* 为每张表自动添加下面几个字段（格式为字段名：类型、默认值、是否可为空）：
    1. id: TEXT PRIMARY KEY,DEFAULT ('r' || lower(hex(randomblob(7))))、 NOT NULL
    2. created: TEXT,strftime('%Y-%m-%d %H:%M:%fZ')、NOT NULL
    3. updated: 同created
* 所有字段均非空， string 默认值为空字符串 ''， int 为 0，bool 为 false
* 其他规则 
    1. 建表 sql,先 default, 然后 NOT NULL
    2. json类型生成 JSON DEFAULT '[]' NOT NULL
    3. 创建唯一索引 用 CREATE UNIQUE INDEX idx_ 开头

------ 
 1. users {
 //可空规则：sting 类型 除name 外，其他字段均可空
 //索引: 
        username: string // nickname
        mobile: string
        password_hash: string
        password_salt: string
        creditsRemain: uint32,  // 剩余点数
  }
 2. book {
////书籍
//可控规则： narrator、publisher、publishDate、trailHash可空
        name: string
        description: string
        cover: string
        narrator: string
        publisher: string
        price: uint32  默认 0  //扣除点数，0表示免费
        publishDate: string // yyyy-MM
        type: uint32    // 0: 默认(tingyue), 1: 图片点读书, 2: html
        ossHashTrail: string //免费时为空，收费时为 试读资源文件在 oss 上的 hash
        ossHash: string    //资源文件在 oss 上的 hash
        assetsSize: uint32 //hash 文件的图片、音频等资源文件大小
    }
//// 订阅记录
//索引：userId+bookId+status 联合唯一索引

 3. subscription {
        userId: string
        bookId: string
        endTime: date_time
        credit_history_id: string
        status: uint32//1 已撤销
    }
////点数变动记录
/索引：userId索引
  4. credit_history {
        userId: string
        bookId: string
        num: uint32
        type: uint32 // 0 购买书籍
   }
///// 验证码
//可空规则： mobile、email、可空
//索引：userId+type+expireTime联合索引

  5. verification_code {
        userId: string
        code: string
        mobile: string
        email: string
        type: uint32 // 注册、找回密码、修改密码、绑定手机、绑定邮箱、绑定微信
        status: uint32
        expireTime: date_time
    }
 ///// 书籍目录（只有一级）
 //可空规则： description、books 可空
 //索引：status+position联合索引
  6. book_group_info {
        name: string
        description: string
        status: uint32   // 0: 未发布, 1: 已发布
        position: uint32 // 排序,0 为最前
        show_type: uint32 // 0: 一行一个, 1: 一行两个
        books: json,默认 [] // book id list, 逗号分隔
    }
//// 帖子
//先保留，测试用
 7. posts {
    images: json,默认[]
    text : string
    user: string
    liked: json,默认[]
 }

*/

//BK 开头，表示和 PocketBase 共享一套模型

//对应 pocketbase 表： book_info
package book;
option go_package = "iting.com/book";

message Basic {
    string id = 1;
    string name = 2;
    string description = 3;
    string cover = 4;
    string narrator = 6;
    string publisher = 7;
    string releaseDate = 8;//e.g 2018-01-01
    uint32 price = 9;
    //只有音频的时候才有
    uint32 duraionSum = 10;
}

// 对应 pocketbase 表 book_info

message RespErr {
    uint32 code = 5;
    uint32 message_ = 6 [json_name = "message"];;
    google.protobuf.Struct data = 7;
}

message Group {
    string id = 1;
    string name = 2;
    ShowType showType = 3;
    repeated Basic books = 4;
    RespErr err = 5;
    enum ShowType {
      OneColumn = 0;
      TwoColumn = 1;
    }

}

message ListReq {
    uint32 page = 1;
    uint32 perPage = 2;
    string sort = 3;
    string filter = 4;
    string expand = 5;
    string fields = 6;
    string skipTotal = 7;
}

message ItemReq {
    string expand = 1;
    string fields = 2;
}

message GroupListResp {
    repeated Group items = 1;
    
    uint32 page = 2;
    uint32 perPage = 3;
    uint32 totalItems = 4;
    uint32 totalPages = 5;
} 

message BookListResp {
    repeated Basic items = 1;
    
    uint32 page = 2;
    uint32 perPage = 3;
    uint32 totalItems = 4;
    uint32 totalPages = 5;
} 


//
// 对应 pocketbase 表 book_info
//
message FileInfo {
    string ossHash = 1;
    string ossHashTrail = 2;
    //所有资源的总大小(包含音、图)
    uint32 assetsSize = 3;
}

message Model {
    //基本信息，可从列表 api 中获取
    Basic basicInfo = 1;
    FileInfo fileInfo = 2;
    repeated Toc toc = 3;
    repeated Page pages = 4;
    map<string, string> additionalInfo = 11;



    message Toc {
        //所在的页码
        uint32 pageIndex = 1;
        //有多少页,默认为1
        uint32 pageLength = 2; 
        string name = 3;
        //孩子节点
        repeated Toc children = 5;
    }
    
    message Page {
        //主要内容的地址
        //图片点读书: src="xx.jpg"，attr=[ImageAttr]
        //tingyue : src="xx.mp3",attr=[AudioAttr]
        //html    : src="xx.html",attr=[HtmlAudioAttr]
        string src = 1;
        string attr = 2;

        // for english book
        message RectAttr {
            repeated Item items = 1;

            message Item {
                message Rect {
                    float x = 1;
                    float y = 2;
                    float width = 3;
                    float height = 4;
                }
                Rect rect = 1;
                string audio = 2;
                string text = 3;
                string textTrans = 4;
            }
        }
        
        // for tingyue
        message AudioAttr {
            string whole = 1;//全文
            string timing_attr = 2;//attr=[AudioTimingAttr]
        }
        
        message AudioTimingAttr {
            repeated SRT timing = 2;//[[340,199,0,9]]
            message SRT {
                //[340,199,0,9] ms_begin,ms_len,pos_begin,pos_len
                //in seconds
                uint32 ms_begin = 1;
                uint32 ms_len = 2;
                uint32 pos_begin = 3;
                uint32 pos_len = 4;
            }
        }
        
        // for bible
        message HtmlAudioAttr {
            string audio = 1;
            string html = 2;//html全文
            repeated TagSRT timing = 3;
            message TagSRT {
                //in seconds
                uint32 start = 1;
                uint32 end = 2;
                string tag = 3;
            }
        }
    }
}
